DROP TABLE ers_reimbursement;
DROP TABLE ers_users;
DROP TABLE ers_user_roles;
DROP TABLE ers_reimbursement_type;
DROP TABLE ers_reimbursement_status;

DROP SEQUENCE ers_users_pk_seq;
DROP SEQUENCE ers_reimbursement_pk_seq;

CREATE TABLE ers_user_roles(
    ers_role_id         NUMBER,
    ers_role_name       VARCHAR2(25),

    CONSTRAINT ers_pk_roles
    PRIMARY KEY (ers_role_id)
);

CREATE TABLE ers_reimbursement_type(
    reimb_type          VARCHAR2(25),
    reimb_type_id       NUMBER,
    
    CONSTRAINT ers_pk_reimb_types
    PRIMARY KEY (reimb_type_id)
);

CREATE TABLE ers_reimbursement_status(
    reimb_status        VARCHAR2(25),
    reimb_status_id     NUMBER,
    
    CONSTRAINT ers_pk_reimb_statuses
    PRIMARY KEY (reimb_status_id)
);

CREATE TABLE ers_users(
    ers_user_id         NUMBER,
    ers_username        VARCHAR2(25) UNIQUE, 
    ers_password        VARCHAR2(50) NOT NULL,
    ers_first_name      VARCHAR2(25) NOT NULL,
    ers_last_name       VARCHAR2(25) NOT NULL,
    ers_role_id         NUMBER,
    
    CONSTRAINT ers_pk_user_ids
    PRIMARY KEY (ers_user_id),
    
    CONSTRAINT ers_fk_user_roles
    FOREIGN KEY (ers_role_id)
    REFERENCES ers_user_roles (ers_role_id)
);

CREATE TABLE ers_reimbursement(
    reimb_id            NUMBER,
    reimb_amount        NUMBER(20, 2),
    reimb_submitted     Timestamp DEFAULT CURRENT_TIMESTAMP,
    reimb_resolved      Timestamp,
    ers_user_id         NUMBER,
    reimb_description   VARCHAR2(200),
    reimb_status_id     NUMBER,
    reimb_type_id       NUMBER,

    CONSTRAINT reimb_pk_ids
    PRIMARY KEY (reimb_id),
    
    CONSTRAINT ers_fk_users
    FOREIGN KEY (ers_user_id)
    REFERENCES ers_users (ers_user_id),
    
    CONSTRAINT reimb_fk_statuses
    FOREIGN KEY (reimb_status_id)
    REFERENCES ers_reimbursement_status (reimb_status_id),
    
    CONSTRAINT reimb_fk_types
    FOREIGN KEY (reimb_type_id)
    REFERENCES ers_reimbursement_type (reimb_type_id)
);

CREATE SEQUENCE ers_users_pk_seq
MINVALUE 1
MAXVALUE 99999999
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE ers_reimbursement_pk_seq
MINVALUE 1
MAXVALUE 99999999
INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER ers_users_pk_trigger
BEFORE INSERT ON ers_users
FOR EACH ROW
BEGIN
    SELECT ers_users_pk_seq.NEXTVAL
    INTO :new.ers_user_id
    FROM dual;
END;
/

CREATE OR REPLACE TRIGGER ers_reimbursement_pk_trigger
BEFORE INSERT ON ers_reimbursement
FOR EACH ROW
BEGIN
    SELECT ers_reimbursement_pk_seq.NEXTVAL
    INTO :new.reimb_id
    FROM dual;
END;
/

INSERT INTO ers_reimbursement_status
VALUES ('Pending', 1);
INSERT INTO ers_reimbursement_status
VALUES ('Approved', 2);
INSERT INTO ers_reimbursement_status
VALUES ('Denied', 3);
INSERT INTO ers_reimbursement_type
VALUES ('Lodging', 1);
INSERT INTO ers_reimbursement_type
VALUES ('Travel', 2);
INSERT INTO ers_reimbursement_type
VALUES ('Food', 3);
INSERT INTO ers_reimbursement_type
VALUES ('Other', 4);
INSERT INTO ers_user_roles
VALUES (1,'manager');
INSERT INTO ers_user_roles
VALUES (2,'employee');

CREATE OR REPLACE PROCEDURE get_all_users
   (
       my_cursor OUT SYS_REFCURSOR
   )
IS
BEGIN
   OPEN my_cursor FOR
   SELECT *
   FROM ers_users A
   JOIN ers_user_roles B
   ON A.ers_role_id = B.ers_role_id
   ORDER BY ers_user_id;
END;
/

CREATE OR REPLACE PROCEDURE get_all_reimbs
   (
       my_cursor OUT SYS_REFCURSOR
   )
IS
BEGIN
   OPEN my_cursor FOR
   SELECT *
   FROM ers_reimbursement 
   ORDER BY reimb_id;
END;
/

INSERT INTO ers_users VALUES (0, 'AbeS', 'password', 'Abe', 'Schroeder', 2);
INSERT INTO ers_users VALUES(0,'SlavG', 'hi' ,'Slavik', 'Gleanco',2);
INSERT INTO ers_users VALUES (0, 'Boss', 'pass', 'Wezley', 'Singleton', 1);
INSERT INTO ers_users VALUES (0, 'Manager', 'many', 'Blake', 'Kruppa', 1);

INSERT INTO ers_reimbursement VALUES(0,300,null,null, 1,'test',1,1);
INSERT INTO ers_reimbursement VALUES(0,400,CURRENT_TIMESTAMP,null,2,'test2',2,2);
INSERT INTO ers_reimbursement VALUES(0,600,CURRENT_TIMESTAMP,null,2,'test4',1,1);

COMMIT;